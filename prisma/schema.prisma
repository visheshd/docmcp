// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  previewFeatures = ["postgresqlExtensions", "interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

model Document {
  id              String    @id @default(uuid())
  url             String
  title           String
  content         String    @db.Text
  metadata        Json      // { package: string, version: string, type: string, tags: string[] }
  crawlDate       DateTime  @map("crawl_date")
  level           Int
  parentDocument  Document? @relation("DocumentToDocument", fields: [parentDocumentId], references: [id], onDelete: SetNull)
  parentDocumentId String?  @map("parent_document_id")
  childDocuments  Document[] @relation("DocumentToDocument")
  chunks          Chunk[]
  job             Job?      @relation(fields: [jobId], references: [id], onDelete: SetNull)
  jobId           String?   @map("job_id")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@index([url])
  @@index([title])
  @@index([crawlDate])
  @@map("documents")
}

model Chunk {
  id          String   @id @default(uuid())
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId  String   @map("document_id")
  content     String   @db.Text
  embedding   Unsupported("vector(1536)") @map("embedding")
  metadata    Json     // { title: string, order: number, type: string }
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("chunks")
}

enum JobStatus {
  pending
  running
  completed
  failed
  cancelled // New status for cancelled jobs
  paused    // New status for paused jobs
}

enum JobType {
  crawl
  process
  delete
}

// Enhanced stage tracking for jobs
enum JobStage {
  initializing
  crawling
  processing
  embedding
  finalizing
  cleanup
}

model Job {
  id        String    @id @default(uuid())
  url       String
  status    JobStatus @default(pending)
  type      JobType   @default(crawl)
  stage     JobStage? // Current stage of the job
  progress  Float     @default(0)
  startDate DateTime  @map("start_date")
  endDate   DateTime? @map("end_date")
  
  // Error tracking
  error     String?   @db.Text
  errorCount Int      @default(0)       @map("error_count")     // Count of errors encountered
  lastError DateTime? @map("last_error") // Timestamp of last error
  
  // Enhanced stats tracking
  stats     Json      @default("{ \"pagesProcessed\": 0, \"pagesSkipped\": 0, \"totalChunks\": 0 }")
  // New detailed stats fields
  itemsTotal      Int @default(0) @map("items_total")       // Total items to process
  itemsProcessed  Int @default(0) @map("items_processed")   // Items successfully processed
  itemsFailed     Int @default(0) @map("items_failed")      // Items that failed processing
  itemsSkipped    Int @default(0) @map("items_skipped")     // Items intentionally skipped
  
  // Estimated completion
  estimatedCompletion DateTime? @map("estimated_completion") // Estimated completion time
  timeElapsed         Int?      @map("time_elapsed")         // Time elapsed in seconds
  timeRemaining       Int?      @map("time_remaining")       // Estimated time remaining in seconds
  
  // Additional fields for documentation crawling
  name      String?   // Friendly name for the documentation source
  maxDepth  Int?      @map("max_depth") // Maximum depth for crawling
  tags      String[]  // Tags associated with this documentation
  metadata  Json?     // Additional metadata about the job
  
  // Control fields
  shouldCancel Boolean @default(false) @map("should_cancel") // Flag to signal job cancellation
  shouldPause  Boolean @default(false) @map("should_pause")  // Flag to signal job pause
  priority     Int     @default(1)                           // Job priority (higher = more important)
  
  // Timestamps
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  lastActivity DateTime @default(now()) @map("last_activity") // Last activity timestamp

  documents Document[] // Add relation back to documents generated by this job

  @@index([status])
  @@index([type])
  @@index([stage])
  @@index([createdAt])
  @@index([priority])
  @@map("jobs")
}
